# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master

variables:
  WORKING_DIR: 'e2e_samples/parking_sensors/src/ddo_transform'
  PACKAGE_MAJOR_VERSION:  1
  PACKAGE_MINOR_VERSION:  1
  PACKAGE_PATCH_VERSION:  $(Build.BuildId)
  SQL_DW_PATH: 'e2e_samples/parking_sensors/sql/ddo_azuresqldw_dw'
  SQL_DW_SOLUTION_NAME: 'ddo_azuresqldw_dw'
  SQL_DW_SOLUTION: '$(SQL_DW_PATH)/$(SQL_DW_SOLUTION_NAME).sln'
  BUILD_PLATFORM: 'Any CPU'
  BUILD_CONFIGURATION: 'Release'

stages:
- stage: 'validate_pr'
  displayName: 'Validate PR'
  condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: 'validate_python_packages'
    displayName: 'Validate Python Packages'
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'

    - script: pip install -r requirements_dev.txt && pip install -r requirements.txt
      workingDirectory: $(WORKING_DIR)
      displayName: 'Install requirements'

    - script: make lint 
      workingDirectory: $(WORKING_DIR)
      displayName: 'Run lint'

    - script: make test
      workingDirectory: $(WORKING_DIR)
      displayName: 'Run tests'

  - job: 'validate_sql_packages'
    displayName: 'Validate SQL Packages'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(SQL_DW_SOLUTION)'

    - task: VSBuild@1
      inputs:
        solution: '$(SQL_DW_SOLUTION)'
        platform: '$(BUILD_PLATFORM)'
        configuration: '$(BUILD_CONFIGURATION)'
    - task: VSTest@2
      inputs:
        platform: '$(BUILD_PLATFORM)'
        configuration: '$(BUILD_CONFIGURATION)'

- stage: 'publish_artifacts'
  displayName: 'Publish Build Artifacts'
  condition: and(always(), contains(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: 'publish_python_packages'
    displayName: 'Publish Python Packages'
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.6'
        architecture: 'x64'

    - script: pip install -r requirements_dev.txt && pip install -r requirements.txt
      workingDirectory: $(WORKING_DIR)
      displayName: 'Install requirements'

    - script: make dist
      env:
        package_version: $(PACKAGE_MAJOR_VERSION).$(PACKAGE_MINOR_VERSION).$(PACKAGE_PATCH_VERSION)
      workingDirectory: $(WORKING_DIR)
      displayName: 'Create wheel package'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(WORKING_DIR)/dist'
        ArtifactName: 'dist'
      displayName: 'Publish Dist Artifacts'

  - job: 'publish_static_artifacts'
    displayName: 'Publish Static Artifacts'
    pool:
      vmImage: 'Ubuntu-16.04'
    steps:
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'databricks'
        ArtifactName: 'databricks'
      displayName: 'Publish Databricks Artifacts'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'adf/_scripts/deploymentadf.ps1'
        ArtifactName: 'adf_scripts'
      displayName: 'Publish ADF Scripts'

  - job: 'publish_sql_packages'
    displayName: 'Publish SQL Packages'
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(SQL_DW_SOLUTION)'

    - task: VSBuild@1
      inputs:
        solution: '$(SQL_DW_SOLUTION)'
        platform: '$(BUILD_PLATFORM)'
        configuration: '$(BUILD_CONFIGURATION)'
    - task: VSTest@2
      inputs:
        platform: '$(BUILD_PLATFORM)'
        configuration: '$(BUILD_CONFIGURATION)'

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(SQL_DW_PATH)/$(SQL_DW_SOLUTION_NAME)/bin/$(BUILD_CONFIGURATION)/ddo_azuresqldw_dw.dacpac'
        ArtifactName: 'sql_dw_dacpac'
      displayName: 'Publish SQL DACPAC'